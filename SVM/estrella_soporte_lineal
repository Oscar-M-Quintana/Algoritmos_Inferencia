# Tratamiento de datos
# ==============================================================================
import pandas as pd
import numpy as np

# Gráficos
# ==============================================================================
import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns
from mlxtend.plotting import plot_decision_regions

# Preprocesado y modelado
# ==============================================================================
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score

# Configuración matplotlib
# ==============================================================================
plt.rcParams['image.cmap'] = "bwr"
#plt.rcParams['figure.dpi'] = "100"
plt.rcParams['savefig.bbox'] = "tight"
style.use('ggplot') or plt.style.use('ggplot')

# Configuración warnings
# ==============================================================================
import warnings
warnings.filterwarnings('ignore')

# Datos
# ==============================================================================
ruta_csv = "ACA VA LA DIRECCION DEL DATASET EN EL ESCRITORIO X EJ"
datos = pd.read_csv(ruta_csv)



# Mostrar las primeras filas del dataset
datos.head(3)

# Crear gráfico de dispersión con las columnas del CSV
fig, ax = plt.subplots(figsize=(6, 4))
ax.scatter(datos['PC1'], datos['PC2'], c=datos['Star type'], cmap='viridis')
ax.set_title("Datos estrella_soporte");

# División de los datos en train y test
# ==============================================================================



# Separar las características (X) de la variable objetivo (y)
X = datos.drop(columns='Star type')  # Eliminamos la columna de etiquetas
y = datos['Star type']  # Columna de etiquetas

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(
                                        X,
                                        y,
                                        train_size=0.8,
                                        random_state=1234,
                                        shuffle=True
                                    )


# Creación del modelo SVM lineal
# ==============================================================================
modelo = SVC(C = 100, kernel = 'linear', random_state=123)
modelo.fit(X_train, y_train)

# Representación gráfica de los límites de clasificación
# ==============================================================================

# Grid de valores
x = np.linspace(np.min(X_train['PC1']), np.max(X_train['PC1']), 50)
y = np.linspace(np.min(X_train['PC2']), np.max(X_train['PC2']), 50)
Y, X = np.meshgrid(y, x)
grid = np.vstack([X.ravel(), Y.ravel()]).T  # Grid de puntos

# Verificar el tamaño de grid
print("Tamaño de grid:", grid.shape)

# Predicción valores grid
pred_grid = modelo.predict(grid)

fig, ax = plt.subplots(figsize=(6, 4))
ax.scatter(grid[:, 0], grid[:, 1], c=pred_grid, alpha=0.2)
ax.scatter(X_train['PC1'], X_train['PC2'], c=y_train, alpha=1)

# Vectores soporte
ax.scatter(
    modelo.support_vectors_[:, 0],
    modelo.support_vectors_[:, 1],
    s=200, linewidth=1,
    facecolors='none', edgecolors='black'
)

# Hiperplano de separación
Z = modelo.decision_function(grid)

# Comprobar el tamaño de Z antes de reshaping
print("Tamaño de Z:", Z.shape)

# Comprobar si Z puede ser reshaped a una cuadrícula de 50x50
if Z.shape[0] == 50 * 50:
    Z = Z.reshape(50, 50)
else:
    print("Error de reshaping: Los tamaños no coinciden")

ax.contour(
    X,
    Y,
    Z,
    colors='k',
    levels=[-1, 0, 1],
    alpha=0.5,
    linestyles=['--', '-', '--']
)

ax.set_title("Resultados clasificación SVM lineal");

# Predicciones test
# ==============================================================================
predicciones = modelo.predict(X_test)
predicciones


# Accuracy de test del modelo 
# ==============================================================================
accuracy = accuracy_score(
            y_true    = y_test,
            y_pred    = predicciones,
            normalize = True
           )
print("")
print(f"El accuracy de test es: {100*accuracy}%")

